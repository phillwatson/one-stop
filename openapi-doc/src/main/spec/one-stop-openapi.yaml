openapi: "3.0.2"
info:
  version: "1.0.0"
  title: "One Stop API"
  description: "One Stop API"

servers:
  - url: http://hillayes.com/api/v1
    description: Main (production) server
  - url: http://localhost/api/v1
    description: Development server

paths:
  /users:
    get:
      summary: "Get all users"
      description: "This can only be done by the logged in user."
      operationId: "getAllUsers"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/NewUserData"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

    post:
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody:
        description: "Created user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
        required: true
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        "400":
          description: "Invalid user supplied"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /users/{id}:
    get:
      summary: "Get user by id"
      description: "This can only be done by the logged in user."
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    put:
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Updated user object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
        required: true
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    delete:
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to delete"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

components:
  schemas:
    NewUserData:
      type: object
      required:
        - username
        - givenName
        - email
      properties:
        username:
          type: string
          description: The user's username
          example: jdoe
        title:
          type: string
          description: The user's title
          example: Mr
        givenName:
          type: string
          description: The user's given name
          example: John
        familyName:
          type: string
          description: The user's family name
          example: Doe
        preferredName:
          type: string
          description: The user's preferred name
          example: John
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
          example: john.doe@work.com
          description: The creditor user's email address
        phone:
          type: string
          description: The user's phone number
          example: 0123456789

    UserData:
      allOf:
        - $ref: "#/components/schemas/NewUserData"
        - type: object
          required:
            - userId
          properties:
            userId:
              type: string
              format: uuid
              description: The Creditor Id
              example: 07061d76-74f3-4163-aa07-fb6909681f81
            dateCreated:
              type: string
              format: date-time
              description: The date the user was created
              example: 2019-01-01T00:00:00.000Z
            dateOnboarded:
              type: string
              format: date-time
              description: The date the user was onboarded
              example: 2019-01-01T00:00:00.000Z
            dateDeleted:
              type: string
              format: date-time
              description: The date the user account was deleted
              example: 2019-01-01T00:00:00.000Z
            dateBlocked:
              type: string
              format: date-time
              description: The date the user account was blocked
              example: 2019-01-01T00:00:00.000Z
            roles:
              type: array
              items:
                type: string
                description: The authorisation roles that the user holds
                example: admin
