openapi: "3.0.2"
info:
  version: "1.0.0"
  title: "One Stop API"
  description: "One Stop API"

servers:
  - url: http://hillayes.com/api/v1
    description: Main (production) server
  - url: http://localhost/api/v1
    description: Development server

tags:
  - name: "auth"
    description: "Operations related to authentication"
  - name: "users"
    description: "Operations about users"
  - name: "rails"
    description: "Operations about rails"
  - name: "accounts"
    description: "Operations about accounts"
  - name: "transactions"
    description: "Operations about account transactions"

paths:
  /auth/login:
    post:
      tags: [ "auth"]
      summary: "Username password login."
      description: "Authenticate user by username and password credentials."
      operationId: "login"
      security: [ ]
      requestBody:
        description: "The user's credentials"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "204":
          description: "successful login"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /auth/logout:
    get:
      tags: [ "auth" ]
      summary: "Close the user's session"
      description: "Revoke all authentication tokens for the current session"
      operationId: "logout"
      security: []
      responses:
        "204":
          description: "successful logout"

  /auth/refresh:
    get:
      tags: [ "auth" ]
      summary: "Refresh auth tokens"
      description: "Generate new authentication tokens for the current session"
      operationId: "refresh"
      security:
        - cookieAuth: [ ]
      responses:
        "204":
          description: "successful refresh"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /users:
    get:
      tags: [ "users" ]
      summary: "Get all users"
      description: "Get a paginated list of all users."
      operationId: "getAllUsers"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUsers"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /users/{id}:
    get:
      tags: [ "users" ]
      summary: "Get user by id"
      description: "Returns the details of the identified user"
      operationId: "getUserById"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    put:
      tags: [ "users" ]
      summary: "Update user"
      description: |
        Updates the user with the given id. Used by adminstrator to update
        a user's details.
      operationId: "updateUser"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Updated user object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    delete:
      tags: [ "users" ]
      summary: "Delete user"
      description: "Deletes the identified user. Admin only."
      operationId: "deleteUser"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to delete"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

  /users/onboard/register:
    post:
      tags: [ "users" ]
      summary: "Register new user"
      description: "Registers a user's email, starting the onboarding process."
      operationId: "registerUser"
      security: []
      requestBody:
        description: "Updated profile object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterRequest"
      responses:
        "204":
          description: "successful operation"
        "409":
          description: "Email already in use."
        "500":
          description: "Internal server error"

  /users/onboard/acknowledge:
    get:
      tags: [ "users" ]
      summary: "Acknowledge user receipt of registration email"
      description: |
        Confirms the user has received the registration email, verifying their email
        address. The user will be redirected to the user confirmation page to allow a
        username and password to be selected.
      operationId: "acknowledgeUser"
      security: []
      parameters:
        - name: "magicToken"
          in: "path"
          description: |
            The magicToken emailed to the user on registration. This identifies the
            user and verifies the email receipt. It expires after a configured duration,
            and is revoked once used.
          required: true
          schema:
            type: string
            example: bdfovw78y1fhjda87sdqus
      responses:
        "307":
          description: "redirected to user profile page"
        "401":
          description: "Token not valid or has expired"
        "500":
          description: "Internal server error"

  /users/onboard/complete:
    post:
      tags: [ "users" ]
      summary: "Completes the user's onboarding"
      description: |
        Sets a user's username and password, completing the onboarding process.
      operationId: "onboardUser"
      security:
        - cookieAuth: [ ]
      requestBody:
        description: "Updated profile object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCompleteRequest"
      responses:
        "201":
          description: "Onboarding complete"
        "401":
          description: "Token not valid or has expired"
        "500":
          description: "Internal server error"

  /profiles:
    get:
      tags: [ "profiles" ]
      summary: "Get the caller's profile"
      description: "Get the profile information for the authenticated user."
      operationId: "getProfile"
      security:
        - cookieAuth: [ ]
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

    put:
      tags: [ "profiles" ]
      summary: "Update the caller's profile"
      description: "Update the profile information for the authenticated user."
      operationId: "updateProfile"
      security:
        - cookieAuth: [ ]
      requestBody:
        description: "Updated profile object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /profiles/password:
    put:
      tags: [ "profiles" ]
      summary: "Update the caller's password"
      description: "Update the password for the authenticated user."
      operationId: "updatePassword"
      security:
        - cookieAuth: [ ]
      requestBody:
        description: "Updated password object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordUpdateRequest"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/countries:
    get:
      tags: [ "rails" ]
      summary: "Get all countries"
      description: "Returns the supported countries."
      operationId: "getAllCountries"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCountries"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/countries/{id}:
    get:
      tags: [ "rails" ]
      summary: "Get country by id"
      description: "Returns the details of the identified country."
      operationId: "getCountryById"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of country to return"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Institution not found"
        "500":
          description: "Internal server error"

  /rails/institutions:
    get:
      tags: [ "rails" ]
      summary: "Get all institutions for identified country"
      description: "Returns the supported institutions within the registered country."
      operationId: "getAllInstitutions"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "countryCode"
          in: "path"
          required: true
          schema:
            type: string
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedInstitutions"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/institutions/{id}:
    get:
      tags: [ "rails" ]
      summary: "Get institution by id"
      description: "Returns the details of the identified institution."
      operationId: "getInstitutionById"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of institution to return"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstitutionResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Institution not found"
        "500":
          description: "Internal server error"

  /rails/consents:
    get:
      tags: [ "accounts" ]
      summary: "Get all consents"
      description: "Get all consents for the authenticated user"
      operationId: "getAllConsents"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUserConsents"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/consents/{institutionId}:
    get:
      tags: [ "accounts" ]
      summary: "Get consent for the identified institution"
      description: "Get the consent held for the identified institution for the authenticated user"
      operationId: "getConsentByInstitution"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "institutionId"
          in: "path"
          description: "ID of institution to which the consent belongs"
          required: true
          example: 07061d7674f3
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserConsentResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Institution or Consent not found"
        "500":
          description: "Internal server error"

    post:
      tags: [ "accounts" ]
      summary: "Register for consent with the identified institution"
      description: |
        Initiates the registration for the application to gain the user's
        consent to access the identified institution
      operationId: "registerConsent"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "institutionId"
          in: "path"
          description: "ID of institution to which the consent belongs"
          required: true
          example: 07061d7674f3
          schema:
            type: string
      requestBody:
        description: "The callback URI"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserConsentRequest"
      responses:
        "307":
          description: "successful operation and redirection to consent form"
        "400":
          description: "Invalid request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Institution not found"
        "500":
          description: "Internal server error"

    delete:
      tags: [ "accounts" ]
      summary: "Delete the identified consent"
      description: |
        Deletes the consent held for the identified institution for the authenticated user; revoking
        any related agreements.
      operationId: "deleteConsentByInstitution"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "institutionId"
          in: "path"
          description: "ID of institution to which the consent belongs"
          required: true
          example: 07061d7674f3
          schema:
            type: string
      responses:
        "204":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Institution or Consent not found"
        "500":
          description: "Internal server error"

  /rails/accounts:
    get:
      tags: [ "accounts" ]
      summary: "Get all accounts"
      description: "Get summary of all accounts for the authenticated user"
      operationId: "getAllAccounts"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAccounts"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/accounts/{id}:
    get:
      tags: [ "accounts" ]
      summary: "Get account by id"
      description: "Get account by id for the authenticated user"
      operationId: "getAccountById"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of account to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Account not found"
        "500":
          description: "Internal server error"

  /rails/transactions/dates:
    get:
      tags: [ "transactions" ]
      summary: "Get all transactions for a given date range"
      description: "Get all transactions for the authenticated user over a given date range"
      operationId: "getTransactionsForDateRange"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "account-id"
          in: "query"
          description: "ID of account to filter transactions"
          required: false
          schema:
            type: string
            format: uuid
        - name: "from-date"
          in: "query"
          description: "The date, inclusive, from which the transaction list should start"
          required: false
          schema:
            type: string
            format: date
        - name: "to-date"
          in: "query"
          description: "The date, exclusive, to which the transaction list should end"
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionList"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Account not found"
        "500":
          description: "Internal server error"

  /rails/transactions:
    get:
      tags: [ "transactions" ]
      summary: "Get all transactions"
      description: "Get all transactions for the authenticated user"
      operationId: "getTransactions"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "account-id"
          in: "query"
          description: "ID of account to filter transactions"
          required: false
          schema:
            type: string
            format: uuid
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTransactions"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Account not found"
        "500":
          description: "Internal server error"

  /rails/transactions/{id}:
    get:
      tags: [ "transactions" ]
      summary: "Get transaction by id"
      description: "Get transaction by id for the authenticated user"
      operationId: "getTransactionById"
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of transaction to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSummaryResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Transaction not found"
        "500":
          description: "Internal server error"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access-token
      description: A JWT identifying the user, the cookie (and token) have a short expiry time

  schemas:
    LoginRequest:
      description: The authentication credentials
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: the user's unique username
        password:
          type: string
          description: the user's password

    ContextAttribute:
      description: |
        An attribute the captures an element of the context in which an error occurred.
        The attributes can be used to support locale translation of message templates; by
        placing the attribute name in the message template.
      type: object
      required:
        - name
      properties:
        name:
          description: the attribute identifier
          type: string
        value:
          description: the attribute value
          type: string

    ServiceError:
      type: object
      required:
        - correlationId
        - severity
        - message
      properties:
        correlationId:
          description: The identifier to relate this error to server log entries.
          type: string
          format: uuid
        severity:
          description: An indication of the severity of the error.
          type: string
          enum: [info, warn, error]
        messageId:
          description: The unique identifier for the message - provides index to locale strings.
          type: string
        message:
          description: |
            A summary of the error. This is not intended to be displayed to the user.
            Instead, a locale message, identified by the messageId, should be displayed.
            The locale message may be a template string containing attribute place-holders
            to be replaced with the named contextAttributes values.
          type: string
        contextAttributes:
          description: |
            An array of named values that capture the context in which the error occurred.
            This can be used to replace place-holders within a template string for locale translation.
          type: array
          items:
            $ref: '#/components/schemas/ContextAttribute'

    UserRegisterRequest:
      type: object
      required:
        - email
      properties:
        email:
          description: The email address the new user wishes to register with
          type: string
          format: email

    UserProfileRequest:
      type: object
      required:
        - username
        - givenName
        - email
      properties:
        username:
          type: string
          description: The user's selected username. Will be verified to ensure it is unique.
          example: jdoe
        title:
          type: string
          description: The user's title
          example: Mr
        givenName:
          type: string
          description: The user's given name
          example: John
        familyName:
          type: string
          description: The user's family name
          example: Doe
        preferredName:
          type: string
          description: The user's preferred name
          example: John
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
          example: john.doe@work.com
          description: The creditor user's email address
        phone:
          type: string
          description: The user's phone number
          example: 0123456789
        locale:
          type: string
          description: An RFC-5646 language tag that identifies a user's preferred language.
          example: en-GB

    UserRole:
      type: string
      description: A authorisation role assigned to user
      enum:
        - user
        - admin

    UserUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/UserProfileRequest"
        - type: object
          required:
            - username
            - givenName
            - email
            - roles
          properties:
            roles:
              type: array
              items:
                $ref: "#/components/schemas/UserRole"

    UserCompleteRequest:
      type: object
      required:
        - token
        - username
        - password
        - givenName
      properties:
        token:
          type: string
          description: |
            The signed JWT that was included in the onboarding link within
            the email sent to the use.
        username:
          type: string
          description: The user's selected username. Will be verified to ensure it is unique.
          example: jdoe
        givenName:
          type: string
          description: The user's given name
          example: John
        password:
          type: string
          description: |
            The user's new password. Must:
              - be at least 12 characters
              - include at least one upper-case character
              - include at least one lower-case character
              - include at least one alpha character
              - include at least one numeric character
              - include at least one non-alpha-numeric character
          example: Simple-Banking-216

    PasswordUpdateRequest:
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          description: The user's current password.
          example: Simple-Banking-216
        newPassword:
          type: string
          description: |
            The user's new password. Must:
              - be at least 12 characters
              - include at least one upper-case character
              - include at least one lower-case character
              - include at least one alpha character
              - include at least one numeric character
              - include at least one non-alpha-numeric character
          example: Simple-Banking-216

    UserProfileResponse:
      type: object
      required:
        - username
        - givenName
        - email
      properties:
        username:
          type: string
          description: The user's username
          example: jdoe
        title:
          type: string
          description: The user's title
          example: Mr
        givenName:
          type: string
          description: The user's given name
          example: John
        familyName:
          type: string
          description: The user's family name
          example: Doe
        preferredName:
          type: string
          description: The user's preferred name
          example: John
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
          example: john.doe@work.com
          description: The creditor user's email address
        phone:
          type: string
          description: The user's phone number
          example: 0123456789
        locale:
          type: string
          description: An RFC-5646 language tag that identifies a user's preferred language.
          example: en-GB
        dateCreated:
          type: string
          format: date-time
          description: The date the user was created
          example: 2019-01-01T00:00:00.000Z
        dateOnboarded:
          type: string
          format: date-time
          description: The date the user was onboarded
          example: 2019-01-01T00:00:00.000Z
        dateBlocked:
          type: string
          format: date-time
          description: The date the user account was blocked
          example: 2019-01-01T00:00:00.000Z

    UserResponse:
      allOf:
        - $ref: "#/components/schemas/UserProfileResponse"
        - type: object
          required:
            - id
            - username
            - givenName
            - email
            - roles
          properties:
            id:
              type: string
              format: uuid
              description: The Creditor Id
              example: 07061d76-74f3-4163-aa07-fb6909681f81
            roles:
              type: array
              items:
                type: string
                description: The authorisation roles that the user holds
                example: admin

    CountryResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The country's ISO-3166 code
          example: GB
        name:
          type: string
          description: The country's name
          example: Great Britain
        flagUri:
          type: string
          format: uri

    InstitutionResponse:
      type: object
      required:
        - id
        - name
        - bic
      properties:
        id:
          type: string
          description: The institution Id
          example: 07061d7674f3
        name:
          type: string
          description: The institution's name
          example: Bank of England
        bic:
          type: string
          description: The institution's BIC
          example: BOEGB2L
        logo:
          type: string
          description: The institution's logo
          example: https://www.bankofengland.co.uk/-/media/boe/images/logos/bank-of-england-logo.png

    UserConsentRequest:
      type: object
      required:
        - callbackUri
      properties:
        callbackUri:
          type: string
          format: uri
          description: The URI to which the application will redirect on completion of consent.
          example: https://api.example.com/accounts

    UserConsentResponse:
      type: object
      required:
        - institutionId
        - institutionName
        - status
      properties:
        institutionId:
          type: string
          description: Identifies the institution record to which the consent relates
          example: 07061d7674f3
        institutionName:
          type: string
          description: Names the institution to which the consent relates
          example: Bank of England
        dateGiven:
          type: string
          format: date-time
          description: The date and time the consent was acknowledged by the user
          example: 2019-01-01T00:00:00.000Z
        agreementExpires:
          type: string
          format: date-time
          description: The date and time the consent agreement will expire
          example: 2019-01-01T00:00:00.000Z
        maxHistory:
          type: integer
          format: int32
          description: The agreed number of past days for which transaction data can be obtained.
          example: 90
        status:
          type: string
          description: |
            Indicates the position in the flow to obtain consent from the user. One of 
             - INITIATED
             - WAITING
             - GIVEN
             - DENIED
             - CANCELLED
          example: INITIATED
        accounts:
          description: |
            The summary list of bank accounts related to the consent.
          type: array
          items:
            $ref: '#/components/schemas/AccountSummaryResponse'

    AccountBalanceResponse:
      description: A snapshot of an account's balance
      type: object
      required:
        - id
        - type
        - amount
        - currency
        - referenceDate
        - dateRecorded
      properties:
        id:
          type: string
          format: uuid
          description: The balance Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        type:
          type: string
          description: The balance type.
          example: interimAvailable
        referenceDate:
          type: string
          format: date
          description: the date the balance refers to
          example: 2023-05-31
        dateRecorded:
          type: string
          format: date-time
          description: the date the balance was recorded.
          example: 2023-05-31
        amount:
          type: number
          format: double
          description: The balance amount
          example: 123.45
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP

    AccountSummaryResponse:
      description: A summary of an account to which the user has granted consent.
      type: object
      required:
        - id
        - name
        - ownerName
        - iban
        - institutionId
      properties:
        id:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        name:
          type: string
          description: The account's name
          example: Main Account
        ownerName:
          type: string
          description: The account owner's name
          example: Jane Doe
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP
        iban:
          type: string
          description: The account's IBAN
          example: GB29NWBK60161331926819
        institutionId:
          type: string
          description: The institution's identifier
          example: 07061d7674f3

    AccountResponse:
      description: The details of an account to which the user has granted consent.
      type: object
      required:
        - id
        - name
        - ownerName
        - iban
        - bank
      properties:
        id:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        name:
          type: string
          description: The account's name
          example: Main Account
        ownerName:
          type: string
          description: The account owner's name
          example: Jane Doe
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP
        iban:
          type: string
          description: The account's IBAN
          example: GB29NWBK60161331926819
        balance:
          description: |
            The account's most recent balance. As the balance records may include different
            types, the response includes a list of balances for the same date.
          type: array
          items:
            $ref: "#/components/schemas/AccountBalanceResponse"
        institution:
          $ref: "#/components/schemas/InstitutionResponse"

    TransactionSummaryResponse:
      type: object
      required:
        - id
        - amount
        - date
        - description
      properties:
        id:
          type: string
          format: uuid
          description: The transaction Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        amount:
          type: number
          format: double
          description: The transaction amount
          example: 123.45
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP
        date:
          type: string
          format: date-time
          description: The transaction date
          example: 2019-01-01T00:00:00.000Z
        description:
          type: string
          description: The transaction description
          example: My transaction description
        accountId:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81

    PageLinks:
      type: object
      required:
        - first
        - last
      properties:
        first:
          type: string
          format: uri
          description: The URL of the first page of items
          example: https://api.example.com/accounts?page=0&page-size=19
        next:
          type: string
          format: uri
          description: The URL of the next page of items
          example: https://api.example.com/accounts?page=3&page-size=19
        previous:
          type: string
          format: uri
          description: The URL of the previous page of items
          example: https://api.example.com/accounts?page=1&page-size=19
        last:
          type: string
          format: uri
          description: The URL of the last page of items
          example: https://api.example.com/accounts?page=15&page-size=19

    PaginatedItems:
      type: object
      required:
        - total
        - count
        - page
        - pageSize
        - links
      properties:
        total:
          type: integer
          format: int64
          description: The total number of items in the list
          example: 292
        count:
          type: integer
          format: int32
          description: The number of items in the page
          example: 20
        page:
          type: integer
          format: int32
          description: The current page number
          example: 2
        pageSize:
          type: integer
          format: int32
          description: The requested number of items per page
          example: 25
        links:
          $ref: "#/components/schemas/PageLinks"

    PaginatedCountries:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of countries
              items:
                $ref: "#/components/schemas/CountryResponse"

    PaginatedInstitutions:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of institutions
              items:
                $ref: "#/components/schemas/InstitutionResponse"

    PaginatedUsers:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of users
              items:
                $ref: "#/components/schemas/UserResponse"

    PaginatedUserConsents:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of consents
              items:
                $ref: "#/components/schemas/UserConsentResponse"

    PaginatedAccounts:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of accounts
              items:
                $ref: "#/components/schemas/AccountResponse"

    PaginatedTransactions:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of transactions
              items:
                $ref: "#/components/schemas/TransactionSummaryResponse"

    TransactionList:
      type: object
      properties:
        transactions:
          type: array
          description: The list of transactions
          items:
            $ref: "#/components/schemas/TransactionSummaryResponse"
