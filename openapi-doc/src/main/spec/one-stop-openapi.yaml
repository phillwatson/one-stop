openapi: "3.0.2"
info:
  version: "1.0.0"
  title: "One Stop API"
  description: "One Stop API"

servers:
  - url: http://hillayes.com/api/v1
    description: Main (production) server
  - url: http://localhost/api/v1
    description: Development server

tags:
  - name: "users"
    description: "Operations about users"
  - name: "rails"
    description: "Operations about rails"
  - name: "accounts"
    description: "Operations about accounts"
  - name: "transactions"
    description: "Operations about account transactions"

paths:
  /users:
    get:
      tags: [ "users" ]
      summary: "Get all users"
      description: "Get a paginated list of all users."
      operationId: "getAllUsers"
      parameters:
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUsers"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

    post:
      tags: [ "users" ]
      summary: "Create user"
      description: "Creates a record for the given user details."
      operationId: "createUser"
      requestBody:
        description: "Created user object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "201":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Invalid user supplied"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /users/{id}:
    get:
      tags: [ "users" ]
      summary: "Get user by id"
      description: "Returns the details of the identified user"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    put:
      tags: [ "users" ]
      summary: "Update user"
      description: "Updates the user with the given id"
      operationId: "updateUser"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Updated user object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserResponse"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

    delete:
      tags: [ "users" ]
      summary: "Delete user"
      description: "Deletes the identified user."
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to delete"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

  /users/{id}/onboard:
    put:
      tags: [ "users" ]
      summary: "Onboard user"
      description: "Confirms the user has completed the onboarding process."
      operationId: "onboardUser"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to onboard"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"

  /profiles:
    get:
      tags: [ "profiles" ]
      summary: "Get the caller's profile"
      description: "Get the profile information for the authenticated user."
      operationId: "getProfile"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileRequest"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

    put:
      tags: [ "profiles" ]
      summary: "Update the caller's profile"
      description: "Update the profile information for the authenticated user."
      operationId: "updateProfile"
      requestBody:
        description: "Updated profile object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /profiles/password:
    put:
      tags: [ "profiles" ]
      summary: "Update the caller's password"
      description: "Update the password for the authenticated user."
      operationId: "updatePassword"
      requestBody:
        description: "Updated password object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordUpdateRequest"
      responses:
        "204":
          description: "successful operation"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/banks:
    get:
      tags: [ "rails" ]
      summary: "Get all banks"
      description: "This can only be done by the logged in user."
      operationId: "getAllBanks"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedBanks"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/banks/{id}:
    get:
      tags: [ "rails" ]
      summary: "Get bank by id"
      description: "This can only be done by the logged in user."
      operationId: "getBankById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of bank to return"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Bank not found"
        "500":
          description: "Internal server error"

  /rails/accounts:
    get:
      tags: [ "accounts" ]
      summary: "Get all accounts"
      description: "Get all accounts for the authenticated user"
      operationId: "getAllAccounts"
      parameters:
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAccounts"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal server error"

  /rails/accounts/{id}:
    get:
      tags: [ "accounts" ]
      summary: "Get account by id"
      description: "Get account by id for the authenticated user"
      operationId: "getAccountById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of account to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Account not found"
        "500":
          description: "Internal server error"

  /rails/transactions:
    get:
      tags: [ "transactions" ]
      summary: "Get all transactions for an account"
      description: "Get all transactions for an account for the authenticated user"
      operationId: "getAllTransactionsForAccount"
      parameters:
        - name: "account-id"
          in: "query"
          description: "ID of account to filter transactions"
          required: false
          schema:
            type: string
            format: uuid
        - name: "page"
          in: "query"
          description: "Page number - zero indexed"
          required: false
          schema:
            type: integer
            format: int32
        - name: "page-size"
          in: "query"
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTransactions"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Account not found"
        "500":
          description: "Internal server error"

  /rails/transactions/{id}:
    get:
      tags: [ "transactions" ]
      summary: "Get transaction by id"
      description: "Get transaction by id for the authenticated user"
      operationId: "getTransactionById"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of transaction to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionSummaryResponse"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Unauthorized"
        "404":
          description: "Transaction not found"
        "500":
          description: "Internal server error"

components:
  schemas:
    UserProfileRequest:
      type: object
      required:
        - username
        - givenName
        - email
      properties:
        username:
          type: string
          description: The user's username
          example: jdoe
        title:
          type: string
          description: The user's title
          example: Mr
        givenName:
          type: string
          description: The user's given name
          example: John
        familyName:
          type: string
          description: The user's family name
          example: Doe
        preferredName:
          type: string
          description: The user's preferred name
          example: John
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
          example: john.doe@work.com
          description: The creditor user's email address
        phone:
          type: string
          description: The user's phone number
          example: 0123456789

    UserProfileResponse:
      allOf:
        - $ref: "#/components/schemas/UserProfileRequest"
        - type: object
          required:
            - username
            - givenName
            - email
          properties:
            dateCreated:
              type: string
              format: date-time
              description: The date the user was created
              example: 2019-01-01T00:00:00.000Z
            dateOnboarded:
              type: string
              format: date-time
              description: The date the user was onboarded
              example: 2019-01-01T00:00:00.000Z

    PasswordUpdateRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: The user's current password
          example: password
        newPassword:
          type: string
          description: The user's new password
          example: password

    UserUpdateRequest:
      type: object
      required:
        - username
        - givenName
        - email
      properties:
        username:
          type: string
          description: The user's username
          example: jdoe
        title:
          type: string
          description: The user's title
          example: Mr
        givenName:
          type: string
          description: The user's given name
          example: John
        familyName:
          type: string
          description: The user's family name
          example: Doe
        preferredName:
          type: string
          description: The user's preferred name
          example: John
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
          example: john.doe@work.com
          description: The creditor user's email address
        phone:
          type: string
          description: The user's phone number
          example: 0123456789

    UserResponse:
      allOf:
        - $ref: "#/components/schemas/UserUpdateRequest"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              description: The Creditor Id
              example: 07061d76-74f3-4163-aa07-fb6909681f81
            dateCreated:
              type: string
              format: date-time
              description: The date the user was created
              example: 2019-01-01T00:00:00.000Z
            dateOnboarded:
              type: string
              format: date-time
              description: The date the user was onboarded
              example: 2019-01-01T00:00:00.000Z
            dateDeleted:
              type: string
              format: date-time
              description: The date the user account was deleted
              example: 2019-01-01T00:00:00.000Z
            dateBlocked:
              type: string
              format: date-time
              description: The date the user account was blocked
              example: 2019-01-01T00:00:00.000Z
            roles:
              type: array
              items:
                type: string
                description: The authorisation roles that the user holds
                example: admin

    BankResponse:
      type: object
      required:
        - id
        - name
        - bic
      properties:
        id:
          type: string
          description: The bank Id
          example: 07061d7674f3
        name:
          type: string
          description: The bank's name
          example: Bank of England
        bic:
          type: string
          description: The bank's BIC
          example: BOEGB2L
        logo:
          type: string
          description: The bank's logo
          example: https://www.bankofengland.co.uk/-/media/boe/images/logos/bank-of-england-logo.png

    AccountResponse:
      type: object
      required:
        - id
        - name
        - iban
        - bank
      properties:
        id:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        name:
          type: string
          description: The account's name
          example: My Current Account
        iban:
          type: string
          description: The account's IBAN
          example: GB29NWBK60161331926819
        bank:
          $ref: "#/components/schemas/BankResponse"

    TransactionSummaryResponse:
      type: object
      required:
        - id
        - amount
        - date
        - description
      properties:
        id:
          type: string
          format: uuid
          description: The transaction Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        amount:
          type: number
          format: double
          description: The transaction amount
          example: 123.45
        date:
          type: string
          format: date-time
          description: The transaction date
          example: 2019-01-01T00:00:00.000Z
        description:
          type: string
          description: The transaction description
          example: My transaction description
        accountId:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81

    PageLinks:
      type: object
      required:
        - first
        - last
      properties:
        first:
          type: string
          description: The URL of the first page of items
          example: https://api.example.com/accounts?page=1&page-size=20
        next:
          type: string
          description: The URL of the next page of items
          example: https://api.example.com/accounts?page=3&page-size=20
        previous:
          type: string
          description: The URL of the previous page of items
          example: https://api.example.com/accounts?page=1&page-size=20
        last:
          type: string
          description: The URL of the last page of items
          example: https://api.example.com/accounts?page=15&page-size=20

    PaginatedItems:
      type: object
      required:
        - total
        - count
        - page
        - pageSize
        - links
      properties:
        total:
          type: integer
          format: int64
          description: The total number of items in the list
          example: 292
        count:
          type: integer
          format: int32
          description: The number of items in the page
          example: 20
        page:
          type: integer
          format: int32
          description: The current page number
          example: 2
        pageSize:
          type: integer
          format: int32
          description: The requested number of items per page
          example: 25
        links:
          $ref: "#/components/schemas/PageLinks"

    PaginatedBanks:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of banks
              items:
                $ref: "#/components/schemas/BankResponse"

    PaginatedUsers:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of users
              items:
                $ref: "#/components/schemas/UserResponse"

    PaginatedAccounts:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of accounts
              items:
                $ref: "#/components/schemas/AccountResponse"

    PaginatedTransactions:
      allOf:
        - $ref: "#/components/schemas/PaginatedItems"
        - type: object
          properties:
            items:
              type: array
              description: The list of transactions
              items:
                $ref: "#/components/schemas/TransactionSummaryResponse"
