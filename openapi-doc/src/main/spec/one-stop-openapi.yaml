openapi: "3.0.2"
info:
  version: "1.0.0"
  title: "One Stop API"
  description: One Stop API

servers:
  - url: http://hillayes.com/api/v1
    description: Main (production) server
  - url: http://localhost/api/v1
    description: Development server

tags:
  - name: "auth"
    description: Operations related to authentication
  - name: "users"
    description: Operations related to users
  - name: "rails"
    description: Operations related to rails
  - name: "accounts"
    description: Operations related to accounts
  - name: "transactions"
    description: Operations related to account transactions
  - name: "categories"
    description: Operations related to transaction categories
  - name: "notifications"
    description: Operations related to user notifications

paths:
  /auth/login:
    post:
      tags: [ "auth"]
      summary: Username password login.
      description: Authenticate user by username and password credentials.
      operationId: login
      security: [ ]
      requestBody:
        description: The user's credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        204:
          description: successful login
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /auth/logout:
    get:
      tags: [ "auth" ]
      summary: Close the user's session
      description: Revoke all authentication tokens for the current session
      operationId: logout
      security: []
      responses:
        204:
          description: successful logout

  /auth/refresh:
    get:
      tags: [ "auth" ]
      summary: Refresh auth tokens
      description: Generate new authentication tokens for the current session
      operationId: refresh
      security:
        - cookieAuth: [ ]
      responses:
        204:
          description: successful refresh
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /users:
    get:
      tags: [ "users" ]
      summary: Get all users
      description: Get a paginated list of all users.
      operationId: getAllUsers
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /users/{id}:
    get:
      tags: [ "users" ]
      summary: Get user by id
      description: Returns the details of the identified user
      operationId: getUserById
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: User not found
        500:
          description: Internal server error

    put:
      tags: [ "users" ]
      summary: Update user
      description: |
        Updates the user with the given id. Used by adminstrator to update a user's details.
      operationId: updateUser
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of user to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: Unauthorized
        404:
          description: User not found
        500:
          description: Internal server error

    delete:
      tags: [ "users" ]
      summary: Delete user
      description: Deletes the identified user. Admin only.
      operationId: deleteUser
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of user to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: successful operation
        401:
          description: Unauthorized
        404:
          description: User not found
        500:
          description: Internal server error

  /users/onboard/register:
    post:
      tags: [ "users" ]
      summary: Register new user
      description: Registers a user's email, starting the onboarding process.
      operationId: registerUser
      security: []
      requestBody:
        description: Updated profile object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        204:
          description: successful operation
        409:
          description: Email already in use.
        500:
          description: Internal server error

  /users/onboard/complete:
    post:
      tags: [ "users" ]
      summary: Completes the user's onboarding
      description: Sets a user's username and password, completing the onboarding process.
      operationId: onboardUser
      security:
        - cookieAuth: [ ]
      requestBody:
        description: Updated profile object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCompleteRequest'
      responses:
        201:
          description: Onboarding complete
          headers:
            Location:
              description: The location of the created user
              schema:
                type: string
                format: uri
        401:
          description: Token not valid or has expired
        500:
          description: Internal server error

  /profiles:
    get:
      tags: [ "profiles" ]
      summary: Get the caller's profile
      description: Get the profile information for the authenticated user.
      operationId: getProfile
      security:
        - cookieAuth: [ ]
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        401:
          description: Unauthorized
        500:
          description: Internal server error

    put:
      tags: [ "profiles" ]
      summary: Update the caller's profile
      description: Update the profile information for the authenticated user.
      operationId: updateProfile
      security:
        - cookieAuth: [ ]
      requestBody:
        description: Updated profile object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        401:
          description: Unauthorized
        500:
          description: Internal server error
  /profiles/authproviders:
    get:
      tags: [ "profiles" ]
      summary: Get the caller's auth-providers
      description: Get the auth-provider information for the authenticated user.
      operationId: getUserAuthProviders
      security:
        - cookieAuth: [ ]
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthProvidersResponse'
        401:
          description: Unauthorized
        500:
          description: Internal server error
    delete:
      tags: [ "profiles" ]
      summary: Delete the identified auth-provider from the caller's auth-providers
      description: Delete the identified auth-provider information for the authenticated user.
      operationId: deleteUserAuthProvider
      security:
        - cookieAuth: [ ]
      responses:
        204:
          description: successful operation
        401:
          description: Unauthorized
        404:
          description: User or AuthProvider not found
        500:
          description: Internal server error

  /profiles/password:
    put:
      tags: [ "profiles" ]
      summary: Update the caller's password
      description: Update the password for the authenticated user.
      operationId: updatePassword
      security:
        - cookieAuth: [ ]
      requestBody:
        description: Updated password object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequest'
      responses:
        204:
          description: successful operation
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/countries:
    get:
      tags: [ "rails" ]
      summary: Get all countries
      description: Returns the supported countries.
      operationId: getAllCountries
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountries'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/countries/{id}:
    get:
      tags: [ "rails" ]
      summary: Get country by id
      description: Returns the details of the identified country.
      operationId: getCountryById
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of country to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Country not found
        500:
          description: Internal server error

  /rails/institutions:
    get:
      tags: [ "rails" ]
      summary: Get all institutions for identified country
      description: Returns the supported institutions within the identified country.
      operationId: getAllInstitutions
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/RailProviderParam'
        - name: "countryCode"
          in: "query"
          required: true
          schema:
            type: string
            default: "GB"
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInstitutions'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/institutions/{id}:
    get:
      tags: [ "rails" ]
      summary: Get institution by id
      description: Returns the details of the identified institution.
      operationId: getInstitutionById
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of institution to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Institution not found
        500:
          description: Internal server error

  /rails/consents:
    get:
      tags: [ "accounts" ]
      summary: Get all consents
      description: Get all consents for the authenticated user
      operationId: getAllConsents
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserConsents'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/consents/{institutionId}:
    get:
      tags: [ "accounts" ]
      summary: Get consent for the identified institution
      description: Get the consent held for the identified institution for the authenticated user
      operationId: getConsentByInstitution
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "institutionId"
          in: "path"
          description: ID of institution to which the consent belongs
          required: true
          example: 07061d7674f3
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConsentResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Institution or Consent not found
        500:
          description: Internal server error

    post:
      tags: [ "accounts" ]
      summary: Register for consent with the identified institution
      description: |
        Initiates the registration for the application to gain the user's
        consent to access the identified institution
      operationId: registerConsent
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "institutionId"
          in: "path"
          description: ID of institution to which the consent belongs
          required: true
          example: 07061d7674f3
          schema:
            type: string
      requestBody:
        description: The callback URI
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConsentRequest'
      responses:
        307:
          description: successful operation and redirection to consent form
        400:
          description: Invalid request
        401:
          description: Unauthorized
        404:
          description: Institution not found
        500:
          description: Internal server error

    delete:
      tags: [ "accounts" ]
      summary: Delete the identified consent
      description: |
        Deletes the consent held for the identified institution for the authenticated
        user; revoking any related agreements.
      operationId: deleteConsentByInstitution
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "institutionId"
          in: "path"
          description: ID of institution to which the consent belongs
          required: true
          example: 07061d7674f3
          schema:
            type: string
        - name: "purge"
          in: "query"
          description: Indicates that the accounts and transaction records are to be purged
          required: false
          example: "true"
          schema:
            type: boolean
      responses:
        204:
          description: successful operation
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Institution or Consent not found
        500:
          description: Internal server error

  /rails/accounts:
    get:
      tags: [ "accounts" ]
      summary: Get all accounts
      description: Get summary of all accounts for the authenticated user
      operationId: getAllAccounts
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAccounts'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/accounts/{id}:
    get:
      tags: [ "accounts" ]
      summary: Get account by id
      description: Get account by id for the authenticated user
      operationId: getAccountById
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of account to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Account not found
        500:
          description: Internal server error

  /rails/transactions:
    get:
      tags: [ "transactions" ]
      summary: Get the calling user's transactions
      description: |
        Get the transactions for the authenticated user, filtered by the given values.
        The results will be returned in descending booking date order.
      operationId: getTransactions
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: "account-id"
          in: "query"
          description: ID of account to filter transactions.
          required: false
          schema:
            type: string
            format: uuid
        - name: "from-date"
          in: "query"
          description: The date, inclusive, from which the transaction list should start.
          required: false
          schema:
            type: string
            format: date
        - name: "to-date"
          in: "query"
          description: The date, exclusive, to which the transaction list should end.
          required: false
          schema:
            type: string
            format: date
        - name: "min-amount"
          in: "query"
          description: |
            The minimum amount of the transaction. The value can be negative, but less than max-amount if specified.
          required: false
          schema:
            type: number
            format: float
        - name: "max-amount"
          in: "query"
          description: |
            The maximum amount of the transaction. The value can be negative, but greater than min-amount if specified.
          required: false
          schema:
            type: number
            format: float
        - name: "reference"
          in: "query"
          description: |
            Any occurrence of the value within the transaction reference will match. The comparison is case-insensitive.
          required: false
          schema:
            type: string
        - name: "info"
          in: "query"
          description: |
            Any occurrence of the value within the additional info will match. The comparison is case-insensitive.
          required: false
          schema:
            type: string
        - name: "creditor"
          in: "query"
          description: |
            Any occurrence of the value within the creditor name will match. The comparison is case-insensitive.
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactions'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Account not found
        500:
          description: Internal server error

  /rails/transactions/category:
    get:
      tags: [ "transactions" ]
      summary: Get the calling user's transactions by category
      description: |
        Get the transactions for the authenticated user, filtered by the given values.
        The results will be returned in descending booking date order.
      operationId: getTransactionsByCategory
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "category-id"
          in: "query"
          description: |
            ID of category to be returned. If not specified, all un-categorised transactions
            will be returned.
          required: false
          schema:
            type: string
            format: uuid
        - name: "from-date"
          in: "query"
          description: The date, inclusive, from which the transaction should start.
          required: false
          schema:
            type: string
            format: date
        - name: "to-date"
          in: "query"
          description: The date, exclusive, to which the transaction should end.
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Transaction not found
        500:
          description: Internal server error

  /rails/transactions/{id}:
    get:
      tags: [ "transactions" ]
      summary: Get transaction by id
      description: Get transaction by id for the authenticated user
      operationId: getTransactionById
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of transaction to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Transaction not found
        500:
          description: Internal server error

  /rails/category/groups:
    get:
      tags: [ "categories" ]
      summary: Get all category groups
      description: Get all category groups for the authenticated user
      operationId: GetCategoryGroups
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryGroups'
        401:
          description: Unauthorized
        500:
          description: Internal server error
    post:
      tags: [ "categories" ]
      summary: Create category group
      description: Creates a new category group for the authenticated user.
      operationId: createCategoryGroup
      security:
        - cookieAuth: [ ]
      requestBody:
        description: The details of the new category group.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryGroupRequest'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              description: The location of the created category group
              schema:
                type: string
                format: uri
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/category/groups/{groupId}:
    get:
      tags: [ "categories" ]
      summary: Get all categories within group
      description: Get all categories within the identified group for the authenticated user
      operationId: getCategories
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "groupId"
          in: "path"
          description: ID of category group whose categories are to be returned
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategories'
        401:
          description: Unauthorized
        500:
          description: Internal server error
    post:
      tags: [ "categories" ]
      summary: Create category within group
      description: Creates a new category within the identified group for the authenticated user.
      operationId: createCategory
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "groupId"
          in: "path"
          description: ID of category group into which the new category is to placed.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The details of the new category.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              description: The location of the created category
              schema:
                type: string
                format: uri
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/categories/{categoryId}:
    get:
      tags: [ "categories" ]
      summary: Get category
      description: Get the authenticated user's identified category.
      operationId: getCategory
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "categoryId"
          in: "path"
          description: ID of category to be returned
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        401:
          description: Unauthorized
        500:
          description: Internal server error

    put:
      tags: [ "categories" ]
      summary: Update category
      description: Updates the authenticated user's identified category.
      operationId: updateCategory
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "categoryId"
          in: "path"
          description: ID of category to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The updated details of the category.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        204:
          description: successful operation
        401:
          description: Unauthorized
        500:
          description: Internal server error

    delete:
      tags: [ "categories" ]
      summary: Delete category
      description: Deletes the authenticated user's identified category.
      operationId: deleteCategory
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "categoryId"
          in: "path"
          description: ID of category to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /rails/categories/{categoryId}/selectors/{accountId}:
    get:
      tags: [ "categories" ]
      summary: Get category selectors
      description: Get selectors for identified category and account.
      operationId: getCategorySelectors
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "categoryId"
          in: "path"
          description: ID of category whose selectors are to be returned
          required: true
          schema:
            type: string
            format: uuid
        - name: "accountId"
          in: "path"
          description: ID of account whose selectors are to be returned
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountCategorySelector'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Category or account not found
        500:
          description: Internal server error
    put:
      tags: [ "categories" ]
      summary: Set category selectors
      description: Set selectors for identified category and account.
      operationId: setCategorySelectors
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "categoryId"
          in: "path"
          description: ID of category whose selectors are to be set
          required: true
          schema:
            type: string
            format: uuid
        - name: "accountId"
          in: "path"
          description: ID of account whose selectors are to be set
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The category/account selectors to be set
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccountCategorySelector'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountCategorySelector'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Category or account not found
        500:
          description: Internal server error

  /rails/categories/statistics:
    get:
      tags: [ "categories" ]
      summary: Get category statistics
      description: Get the category statistics for the authenticated user, across all their accounts.
      operationId: getCategoryStatistics
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "from-date"
          in: "query"
          description: The date, inclusive, from which the transaction should start.
          required: false
          schema:
            type: string
            format: date
        - name: "to-date"
          in: "query"
          description: The date, exclusive, to which the transaction should end.
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryStatisticsResponse'
        400:
          description: Invalid ID supplied
        401:
          description: Unauthorized
        404:
          description: Category or account not found
        500:
          description: Internal server error

  /notifications:
    get:
      tags: [ "notifications" ]
      summary: Get recent notifications
      description: Get notifications for the authenticated user dated after a given date-time
      operationId: getNotifications
      security:
        - cookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageIndexParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: "after"
          in: "query"
          description: ID of account to filter transactions
          example: 2019-01-01T14:25:32.201Z
          required: false
          schema:
            type: string
            format: date-time
            default: 1970-01-01T00:00:00Z
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotifications'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /notifications/{id}:
    delete:
      tags: [ "notifications" ]
      summary: Delete notification
      description: Delete the identified notifications
      operationId: deleteNotification
      security:
        - cookieAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: ID of notification to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: successful operation
        401:
          description: Unauthorized
        500:
          description: Internal server error

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access-token
      description: A JWT identifying the user, the cookie (and token) have a short expiry time

  parameters:
    PageIndexParam:
      name: page
      in: query
      description: The zero-based index of the page of results to return.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
      example: 10

    PageSizeParam:
      name: pageSize
      in: query
      description: The maximum number of results to return in a page.
      required: false
      schema:
        type: integer
        format: int32
        default: 20
        minimum: 1
      example: 30

    RailProviderParam:
      name: rail
      in: query
      description: The rail provider identity.
      required: false
      schema:
        type: string
        enum: [NORDIGEN, YAPILY]
      example: NORDIGEN

  schemas:
    LoginRequest:
      description: The authentication credentials
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: the user's unique username
        password:
          type: string
          description: the user's password

    ErrorSeverity:
      description: An indication of the severity of a service error.
      type: string
      enum: [info, warning, error]
      example: info

    ServiceErrorResponse:
      type: object
      description: |
        Conveys a service error response; showing the causes(s) of the error. A response may
        return several causes; which will be shown in the "errors" array. The "correlationId"
        can be used to identify the server log entries related to the error(s).
      required:
        - correlationId
        - severity
      properties:
        correlationId:
          description: The identifier to relate this error to server log entries.
          type: string
        severity:
          description: The highest of the severity levels within the list of errors
          $ref: '#/components/schemas/ErrorSeverity'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ServiceError'

    ServiceError:
      type: object
      description: Details the cause of a service error.
      required:
        - severity
        - message
      properties:
        severity:
          description: An indication of the severity of the error.
          $ref: '#/components/schemas/ErrorSeverity'
        messageId:
          description: The unique identifier for the message - provides index to locale strings.
          type: string
        message:
          description: |
            A summary of the error. This is not intended to be displayed to the user.
            Instead, a locale message, identified by the messageId, should be displayed.
            The locale message may be a template string containing attribute place-holders
            to be replaced with the named contextAttributes values.
          type: string
        contextAttributes:
          description: |
            An array of named values that capture the context in which the error occurred.
            This can be used to replace place-holders within a template string for locale translation.
          type: object
          additionalProperties:
            type: string

    UserRegisterRequest:
      type: object
      required:
        - email
      properties:
        email:
          description: The email address the new user wishes to register with
          type: string
          format: email

    UserProfileRequest:
      type: object
      required:
        - username
        - givenName
        - email
      properties:
        username:
          type: string
          description: The user's selected username. Will be verified to ensure it is unique.
          example: jdoe
        title:
          type: string
          description: The user's title
          example: Mr
        givenName:
          type: string
          description: The user's given name
          example: John
        familyName:
          type: string
          description: The user's family name
          example: Doe
        preferredName:
          type: string
          description: The user's preferred name
          example: John
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
          example: john.doe@work.com
          description: The creditor user's email address
        phone:
          type: string
          description: The user's phone number
          example: 0123456789
        locale:
          type: string
          description: An RFC-5646 language tag that identifies a user's preferred language.
          example: en-GB

    UserRole:
      type: string
      description: A authorisation role assigned to user
      enum:
        - user
        - admin

    UserUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/UserProfileRequest'
        - type: object
          required:
            - username
            - givenName
            - email
            - roles
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'

    UserCompleteRequest:
      type: object
      required:
        - token
        - username
        - password
        - givenName
      properties:
        token:
          type: string
          description: |
            The signed JWT that was included in the onboarding link within
            the email sent to the use.
        username:
          type: string
          description: The user's selected username. Will be verified to ensure it is unique.
          example: jdoe
        givenName:
          type: string
          description: The user's given name
          example: John
        password:
          type: string
          description: |
            The user's new password. Must:
              - be at least 12 characters
              - include at least one upper-case character
              - include at least one lower-case character
              - include at least one alpha character
              - include at least one numeric character
              - include at least one non-alpha-numeric character
          example: Simple-Banking-216

    PasswordUpdateRequest:
      type: object
      required:
        - newPassword
      properties:
        oldPassword:
          type: string
          description: The user's current password.
          example: Simple-Banking-216
        newPassword:
          type: string
          description: |
            The user's new password. Must:
              - be at least 12 characters
              - include at least one upper-case character
              - include at least one lower-case character
              - include at least one alpha character
              - include at least one numeric character
              - include at least one non-alpha-numeric character
          example: Simple-Banking-216

    UserAuthProvider:
      type: object
      description: |
        The detail of an auth-provider with which a user has user for authentication
      required:
        - id
        - name
        - dateCreated
      properties:
        id:
          type: string
          description: The unique identifier for the auth-provider
          example: GOOGLE
        name:
          type: string
          description: the recognised name of the auth-provider
        logo:
          type: string
          format: uri
          description: the URI for the auth-providers logo
          example: https://img.icons8.com/color/48/000000/google-logo.png
        dateCreated:
          type: string
          format: date-time
          description: The date and time the user first authenticated with the provider
          example: 2019-01-01T00:00:00.000Z
        dateLastUsed:
          type: string
          format: date-time
          description: The date and time the user last authenticated with the provider
          example: 2019-01-31T00:00:00.000Z

    UserAuthProvidersResponse:
      type: object
      properties:
        authProviders:
          type: array
          description: The list of Open-ID Connect Providers with which the user has authenticated.
          items:
            $ref: '#/components/schemas/UserAuthProvider'

    UserProfileResponse:
      type: object
      required:
        - username
        - givenName
        - email
        - roles
      properties:
        username:
          type: string
          description: The user's username
          example: jdoe
        title:
          type: string
          description: The user's title
          example: Mr
        givenName:
          type: string
          description: The user's given name
          example: John
        familyName:
          type: string
          description: The user's family name
          example: Doe
        preferredName:
          type: string
          description: The user's preferred name
          example: John
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
          example: john.doe@work.com
          description: The creditor user's email address
        phone:
          type: string
          description: The user's phone number
          example: 0123456789
        locale:
          type: string
          description: An RFC-5646 language tag that identifies a user's preferred language.
          example: en-GB
        dateCreated:
          type: string
          format: date-time
          description: The date the user was created
        dateOnboarded:
          type: string
          format: date-time
          description: The date the user was onboarded
        dateBlocked:
          type: string
          format: date-time
          description: The date the user account was blocked
        roles:
          type: array
          items:
            type: string
            description: The authorisation roles that the user holds
            example: admin

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserProfileResponse'
        - type: object
          required:
            - id
            - username
            - givenName
            - email
            - roles
          properties:
            id:
              type: string
              format: uuid
              description: The user Id
              example: 07061d76-74f3-4163-aa07-fb6909681f81

    CountryResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The country's ISO-3166 code
          example: GB
        name:
          type: string
          description: The country's name
          example: Great Britain
        flagUri:
          type: string
          format: uri

    InstitutionResponse:
      type: object
      required:
        - id
        - provider
        - name
        - bic
      properties:
        id:
          type: string
          description: The institution Id
          example: 07061d7674f3
        provider:
          type: string
          description: The Rail Provider from which the institution is sourced
          example: NORDIGEN
        name:
          type: string
          description: The institution's name
          example: Bank of England
        bic:
          type: string
          description: The institution's BIC
          example: BOEGB2L
        logo:
          type: string
          description: The institution's logo
          example: https://www.bankofengland.co.uk/-/media/boe/images/logos/bank-of-england-logo.png

    UserConsentRequest:
      type: object
      required:
        - callbackUri
      properties:
        callbackUri:
          type: string
          format: uri
          description: The URI to which the application will redirect on completion of consent.
          example: https://api.example.com/accounts

    UserConsentResponse:
      type: object
      required:
        - id
        - institutionId
        - institutionName
        - status
      properties:
        id:
          type: string
          format: uuid
          description: The user-consent Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        institutionId:
          type: string
          description: Identifies the institution record to which the consent relates
          example: 07061d7674f3
        institutionName:
          type: string
          description: Names the institution to which the consent relates
          example: Bank of England
        dateGiven:
          type: string
          format: date-time
          description: The date and time the consent was acknowledged by the user
          example: 2019-01-01T00:00:00.000Z
        agreementExpires:
          type: string
          format: date-time
          description: The date and time the consent agreement will expire
          example: 2019-01-01T00:00:00.000Z
        maxHistory:
          type: integer
          format: int32
          description: The agreed number of past days for which transaction data can be obtained.
          example: 90
        status:
          type: string
          description: |
            Indicates the position in the flow to obtain consent from the user. One of 
             - INITIATED
             - WAITING
             - GIVEN
             - DENIED
             - CANCELLED
          example: INITIATED
        errorCode:
          type: string
          description: If the consent is denied, this is code indicates the reason
        errorDetail:
          type: string
          description: If the consent is denied, this is gives a descriptive reason.
        accounts:
          description: |
            The summary list of bank accounts related to the consent.
          type: array
          items:
            $ref: '#/components/schemas/AccountSummaryResponse'

    AccountBalanceResponse:
      description: A snapshot of an account's balance
      type: object
      required:
        - id
        - type
        - amount
        - currency
        - referenceDate
        - dateRecorded
      properties:
        id:
          type: string
          format: uuid
          description: The balance Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        type:
          type: string
          description: The balance type.
          example: interimAvailable
        referenceDate:
          type: string
          format: date-time
          description: the date the balance refers to
          example: 2023-05-31
        dateRecorded:
          type: string
          format: date-time
          description: the date the balance was recorded.
          example: 2023-05-31T12:10:25.000Z
        amount:
          type: number
          format: double
          description: The balance amount
          example: 123.45
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP

    AccountSummaryResponse:
      description: A summary of an account to which the user has granted consent.
      type: object
      required:
        - id
        - name
        - ownerName
        - iban
        - institutionId
      properties:
        id:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        name:
          type: string
          description: The account's name
          example: Main Account
        ownerName:
          type: string
          description: The account owner's name
          example: Jane Doe
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP
        iban:
          type: string
          description: The account's IBAN
          example: GB29NWBK60161331926819
        institutionId:
          type: string
          description: The institution's identifier
          example: 07061d7674f3

    AccountResponse:
      description: The details of an account to which the user has granted consent.
      type: object
      required:
        - id
        - name
        - ownerName
        - iban
        - bank
      properties:
        id:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        name:
          type: string
          description: The account's name
          example: Main Account
        ownerName:
          type: string
          description: The account owner's name
          example: Jane Doe
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP
        iban:
          type: string
          description: The account's IBAN
          example: GB29NWBK60161331926819
        balance:
          description: |
            The account's most recent balance. As the balance records may include different
            types, the response includes a list of balances for the same date.
          type: array
          items:
            $ref: '#/components/schemas/AccountBalanceResponse'
        institution:
          $ref: '#/components/schemas/InstitutionResponse'

    TransactionResponse:
      type: object
      required:
        - id
        - amount
        - date
        - description
      properties:
        id:
          type: string
          format: uuid
          description: The transaction Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        accountId:
          type: string
          format: uuid
          description: The account Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        transactionId:
          type: string
          description: The transaction identifier given by financial institution.
        bookingDateTime:
          type: string
          format: date-time
          description: The date and time when an entry is posted to an account on the financial institutions books.
          example: 2019-01-01T00:00:00.000Z
        valueDateTime:
          type: string
          format: date-time
          description: The date and time at which assets become available to the account owner in case of a credit.
          example: 2019-01-01T00:00:00.000Z
        amount:
          type: number
          format: double
          description: The transaction amount
          example: 123.45
        currency:
          type: string
          description: The ISO-4217 currency code
          minLength: 3
          maxLength: 3
          example: GBP
        reference:
          type: string
          description: The identification of the transaction as used for reference given by financial institution.
          example: 1234567890
        additionalInformation:
          type: string
          description: Might be used by the financial institution to transport additional transaction related information
          example: My transaction description
        creditorName:
          type: string
          description: The name of the creditor
          example: John Doe

    NotificationResponse:
      type: object
      required:
        - id
        - timestamp
        - topic
        - severity
        - message
      properties:
        id:
          type: string
          format: uuid
          description: The notification Id
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        timestamp:
          type: string
          format: date-time
          description: The notification date and time
          example: 2019-01-01T00:00:00.000Z
        topic:
          type: string
          description: The topic in which the notification is categorised.
        correlationId:
          description: The identifier to relate this notification to server log entries.
          type: string
        severity:
          description: An indication of the severity of the notification.
          type: string
          enum: [info, warning, error]
        message:
          description: The notification message to be displayed.
          type: string

    CategoryGroupRequest:
      description: A named group by which categories can be arranged.
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The category group's name (unique to the user's category groups).
          example: Investments
        description:
          type: string
          description: The category group's description.
          example: Breakdown of investment income and expenditure.

    CategoryGroupResponse:
      description: A named category group by which categories can be arranged.
      allOf:
        - $ref: '#/components/schemas/CategoryGroupRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              description: The category group Id
              example: 07061d76-74f3-4163-aa07-fb6909681f81

    CategoryRequest:
      description: A named category by which transactions can be grouped.
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The category's name (unique to the user's categories).
          example: Groceries
        description:
          type: string
          description: The category's description.
          example: Food and household items
        colour:
          type: string
          description: The colour to be used to represent the category in the UI.
          example: '#0A8855'

    CategoryResponse:
      description: A named category by which transactions can be grouped.
      allOf:
        - $ref: '#/components/schemas/CategoryRequest'
        - type: object
          required:
            - id
            - groupId
          properties:
            id:
              type: string
              format: uuid
              description: The category Id
              example: 07061d76-74f3-4163-aa07-fb6909681f81
            groupId:
              type: string
              format: uuid
              description: The category's group Id
              example: 07061d76-74f3-4163-aa07-fb6909681f81

    AccountCategorySelector:
      description: |
        A selector to match an account's transactions to a category. Multiple selectors may
        exist for the same category/account pair. In which case, a transaction can match any
        of the selectors to be categorised.
      type: object
      properties:
        infoContains:
          type: string
          description: |
            Any occurrence of the value within the additional info will match. The comparison is case-sensitive.
          example: Tesco
        refContains:
          type: string
          description: |
            Any occurrence of the value within the transaction reference will match. The comparison is case-sensitive.
          example: 1234567890
        creditorContains:
          type: string
          description: |
            Any occurrence of the value within the creditor name will match. The comparison is case-sensitive.
          example: John Doe

    CategoryStatisticsResponse:
      description: A summary of the transactions in a category.
      type: object
      required:
        - category
        - count
        - total
        - credit
        - debit
      properties:
        categoryId:
          type: string
          format: uuid
          description: The category Id. This will be null for uncategorised transactions.
          example: 07061d76-74f3-4163-aa07-fb6909681f81
        category:
          type: string
          description: The category's name
          example: Groceries
        description:
          type: string
          description: The category's description
          example: Food and Drink
        colour:
          type: string
          description: The category's colour
          example: '#0A8855'
        count:
          type: integer
          format: int64
          description: The number of transactions in the category
          example: 5
        total:
          type: number
          format: double
          description: The sum total of transactions in the category, both debit and credit.
          example: -123.45
        credit:
          type: number
          format: double
          description: |
            The total credit value of transactions in the category; shown as a positive value.
          example: 123.45
        debit:
          type: number
          format: double
          description: |
            The total debit value of transactions in the category; shown as a positive value.
          example: 123.45

    PageLinks:
      type: object
      required:
        - first
        - last
      properties:
        first:
          type: string
          format: uri
          description: The URL of the first page of items
          example: https://api.example.com/accounts?page=0&page-size=19
        next:
          type: string
          format: uri
          description: The URL of the next page of items
          example: https://api.example.com/accounts?page=3&page-size=19
        previous:
          type: string
          format: uri
          description: The URL of the previous page of items
          example: https://api.example.com/accounts?page=1&page-size=19
        last:
          type: string
          format: uri
          description: The URL of the last page of items
          example: https://api.example.com/accounts?page=15&page-size=19

    PaginatedItems:
      type: object
      required:
        - total
        - totalPages
        - count
        - page
        - pageSize
        - links
      properties:
        total:
          type: integer
          format: int64
          description: The total number of items available
          example: 292
        totalPages:
          type: integer
          format: int32
          description: The total number of pages available
          example: 292
        count:
          type: integer
          format: int32
          description: The number of items in the page
          example: 20
        page:
          type: integer
          format: int32
          description: The current page number
          example: 2
        pageSize:
          type: integer
          format: int32
          description: The requested number of items per page
          example: 25
        links:
          $ref: '#/components/schemas/PageLinks'

    PaginatedCountries:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of countries
              items:
                $ref: '#/components/schemas/CountryResponse'

    PaginatedInstitutions:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of institutions
              items:
                $ref: '#/components/schemas/InstitutionResponse'

    PaginatedUsers:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of users
              items:
                $ref: '#/components/schemas/UserResponse'

    PaginatedUserConsents:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of consents
              items:
                $ref: '#/components/schemas/UserConsentResponse'

    PaginatedAccounts:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of accounts
              items:
                $ref: '#/components/schemas/AccountResponse'

    PaginatedTransactions:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            currencyTotals:
              description: |
                An array of the monetary totals for the filtered transactions, keyed on currency.
              type: string
              additionalProperties:
                type: number
                format: double
                description: The total amount for filtered transactions
                example: 123.45
            items:
              type: array
              description: The list of transactions
              items:
                $ref: '#/components/schemas/TransactionResponse'

    PaginatedNotifications:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of notifications
              items:
                $ref: '#/components/schemas/NotificationResponse'

    PaginatedCategoryGroups:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of categories
              items:
                $ref: '#/components/schemas/CategoryGroupResponse'

    PaginatedCategories:
      allOf:
        - $ref: '#/components/schemas/PaginatedItems'
        - type: object
          properties:
            items:
              type: array
              description: The list of categories
              items:
                $ref: '#/components/schemas/CategoryResponse'
